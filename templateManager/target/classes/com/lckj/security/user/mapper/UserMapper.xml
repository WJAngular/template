<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lckj.security.user.mapper.UserMapper">	  
	<select id="count" parameterType="map" resultType="int">
		SELECT count(1) FROM PUB_USER 
		<if test="condition.expressions != null ">
			<where>${condition.comboedExpressions}</where>
		</if>		
	</select>
	  
	<select id="list" parameterType="map" resultType="com.lckj.security.user.model.UserVO">
		SELECT * FROM PUB_USER 
		<if test="condition.expressions != null ">
			<where>${condition.comboedExpressions}</where>
		</if>		
		<if test="condition.orderBy != null">
			${condition.orderBy}
		</if>  
	</select>
	<select id="exportList" parameterType="map" resultType="com.lckj.security.user.model.UserVO">
		select t.dept_name,t.user_name,t.account,decode(t.sex,1,'男','女') sexName from pub_user t 
		<if test="condition.expressions != null ">
			<where>${condition.comboedExpressions}</where>
		</if>		
		<if test="condition.orderBy != null">
			${condition.orderBy}
		</if>  
	</select>
	
	<select id="getLoginUser" parameterType="map" resultType="com.lckj.security.user.model.UserVO">
		SELECT * FROM PUB_USER t where t.account = #{account} and t.password = #{password}  
	</select>
	
	<insert id="insert" parameterType="com.lckj.security.user.model.UserVO" >
		INSERT INTO pub_user (
				DEPT_ID,
				DEPT_CODE,
				DEPT_NAME,
				USER_NAME,
				ACCOUNT,
				PASSWORD,
				IDENTITY_CARD,
				NATIVE_PLACE,
				QQ_NUMBER,
				EMAIL,
				MOBILEPHONE,
				EDUCATION_DEGREE,
				TELEPHONE,
				BIRTHDAY,
				RELATION_ADDRESS,
				CREATOR_ID,
				CREATOR_NAME,
				USER_SORT,
				SEX,
				STATUS,
				POST,
				USER_TYPE,
				OWNER_ID,
				PHOTO,
				PHOTO_PATH,
				REMARK
		)VALUES(
				#{deptId,jdbcType=INTEGER},
				#{deptCode,jdbcType=VARCHAR},
				#{deptName,jdbcType=VARCHAR},
				#{userName,jdbcType=VARCHAR},
				#{account,jdbcType=VARCHAR},
				#{password,jdbcType=VARCHAR},
				#{identityCard,jdbcType=VARCHAR},
				#{nativePlace,jdbcType=VARCHAR},
				#{qqNumber,jdbcType=VARCHAR},
				#{email,jdbcType=VARCHAR},
				#{mobilephone,jdbcType=VARCHAR},
				#{educationDegree,jdbcType=TINYINT},
				#{telephone,jdbcType=VARCHAR},
				#{birthday,jdbcType=TIMESTAMP},
				#{relationAddress,jdbcType=VARCHAR},
				#{creatorId,jdbcType=INTEGER},
				#{creatorName,jdbcType=VARCHAR},
				#{userSort,jdbcType=INTEGER},
				#{sex,jdbcType=TINYINT},
				#{status,jdbcType=TINYINT},
				#{post,jdbcType=TINYINT},
				#{userType,jdbcType=TINYINT},
				#{ownerId,jdbcType=INTEGER},
				#{photo,jdbcType=VARCHAR},
				#{photoPath,jdbcType=VARCHAR},
				#{remark,jdbcType=VARCHAR}
		)
	</insert>
	
	<insert id="insertBatch" parameterType="java.util.List">
		INSERT INTO pub_user (
				DEPT_ID,
				DEPT_CODE,
				DEPT_NAME,
				USER_NAME,
				ACCOUNT,
				PASSWORD,
				IDENTITY_CARD,
				NATIVE_PLACE,
				QQ_NUMBER,
				EMAIL,
				MOBILEPHONE,
				EDUCATION_DEGREE,
				TELEPHONE,
				BIRTHDAY,
				RELATION_ADDRESS,
				CREATOR_ID,
				CREATOR_NAME,
				USER_SORT,
				SEX,
				STATUS,
				POST,
				USER_TYPE,
				OWNER_ID,
				PHOTO,
				PHOTO_PATH,
				REMARK
		) values
		<foreach collection="list" item="item" index="index" separator=",">
		(
		
				#{item.deptId,jdbcType=INTEGER},
				#{item.deptCode,jdbcType=VARCHAR},
				#{item.deptName,jdbcType=VARCHAR},
				#{item.userName,jdbcType=VARCHAR},
				#{item.account,jdbcType=VARCHAR},
				#{item.password,jdbcType=VARCHAR},
				#{item.identityCard,jdbcType=VARCHAR},
				#{item.nativePlace,jdbcType=VARCHAR},
				#{item.qqNumber,jdbcType=VARCHAR},
				#{item.email,jdbcType=VARCHAR},
				#{item.mobilephone,jdbcType=VARCHAR},
				#{item.educationDegree,jdbcType=TINYINT},
				#{item.telephone,jdbcType=VARCHAR},
				#{item.birthday,jdbcType=TIMESTAMP},
				#{item.relationAddress,jdbcType=VARCHAR},
				#{item.creatorId,jdbcType=INTEGER},
				#{item.creatorName,jdbcType=VARCHAR},
				#{item.userSort,jdbcType=INTEGER},
				#{item.sex,jdbcType=TINYINT},
				#{item.status,jdbcType=TINYINT},
				#{item.post,jdbcType=TINYINT},
				#{item.userType,jdbcType=TINYINT},
				#{item.ownerId,jdbcType=INTEGER},
				#{item.photo,jdbcType=VARCHAR},
				#{item.photoPath,jdbcType=VARCHAR},
				#{item.remark,jdbcType=VARCHAR}
				)
		</foreach>
	</insert>
			
	<select id="read" parameterType="map" resultType="com.lckj.security.user.model.UserVO">
		SELECT * FROM PUB_USER WHERE USER_ID = #{id[0]}
	</select>

	<insert id="insertPartitive" parameterType="map">
		INSERT INTO PUB_USER (${fields._insertFields}) values (${fields._insertValues})
	</insert>
	  
	<update id="update" parameterType="com.lckj.security.user.model.UserVO">
		UPDATE pub_user SET 
				DEPT_ID = #{deptId,jdbcType=INTEGER},
				DEPT_CODE = #{deptCode,jdbcType=VARCHAR},
				DEPT_NAME = #{deptName,jdbcType=VARCHAR},
				USER_NAME = #{userName,jdbcType=VARCHAR},
				ACCOUNT = #{account,jdbcType=VARCHAR},
				PASSWORD = #{password,jdbcType=VARCHAR},
				IDENTITY_CARD = #{identityCard,jdbcType=VARCHAR},
				NATIVE_PLACE = #{nativePlace,jdbcType=VARCHAR},
				QQ_NUMBER = #{qqNumber,jdbcType=VARCHAR},
				EMAIL = #{email,jdbcType=VARCHAR},
				MOBILEPHONE = #{mobilephone,jdbcType=VARCHAR},
				EDUCATION_DEGREE = #{educationDegree,jdbcType=TINYINT},
				TELEPHONE = #{telephone,jdbcType=VARCHAR},
				BIRTHDAY = #{birthday,jdbcType=TIMESTAMP},
				RELATION_ADDRESS = #{relationAddress,jdbcType=VARCHAR},
				CREATOR_ID = #{creatorId,jdbcType=INTEGER},
				CREATOR_NAME = #{creatorName,jdbcType=VARCHAR},
				USER_SORT = #{userSort,jdbcType=INTEGER},
				SEX = #{sex,jdbcType=TINYINT},
				STATUS = #{status,jdbcType=TINYINT},
				POST = #{post,jdbcType=TINYINT},
				USER_TYPE = #{userType,jdbcType=TINYINT},
				OWNER_ID = #{ownerId,jdbcType=INTEGER},
				PHOTO = #{photo,jdbcType=VARCHAR},
				PHOTO_PATH = #{photoPath,jdbcType=VARCHAR},
				REMARK = #{remark,jdbcType=VARCHAR}
				WHERE USER_ID = #{userId}
	</update>

	<update id="updatePartitive" parameterType="map" >
		UPDATE PUB_USER SET ${fields._updateSql} WHERE USER_ID = #{id[0]}
	</update>
	  
	<update id="updateBatch" parameterType="map" >
		UPDATE PUB_USER SET  ${fields._updateSql}
		<if test="condition.expressions != null ">
			<where> ${condition.comboedExpressions} </where>
		</if>		
	</update>
		  
	<delete id="delete" parameterType="map" >
		DELETE FROM PUB_USER WHERE USER_ID = #{id[0]}
	</delete>

	<delete id="deleteBatch" parameterType="map" >
		DELETE FROM PUB_USER 
		<if test="condition.expressions != null ">
			<where>${condition.comboedExpressions}</where>
		</if>		
	</delete>
	
<!-- userRRole -->	
	<select id="queryUserByRole" parameterType="map" resultType="com.lckj.security.user.model.UserVO">
		SELECT PUB_USER.*
          FROM PUB_USER, PUB_USER_R_ROLE
         WHERE PUB_USER.USER_ID = PUB_USER_R_ROLE.USER_ID
		<if test="condition.expressions != null ">
			${condition.comboedExpressions}
		</if>		
	</select>
	
	<insert id="insertUserRRole" parameterType="com.lckj.security.user.model.UserRRoleVO" >
		INSERT INTO PUB_USER_R_ROLE (
				USER_ID,
				ROLE_ID
		)VALUES(
				#{userId,jdbcType=INTEGER},
				#{roleId,jdbcType=INTEGER}
		)
	</insert>
	
	<insert id="batchInsertUserRRole" parameterType="java.util.List" >
		INSERT INTO PUB_USER_R_ROLE(
				USER_ID,
				ROLE_ID
		) values
		<foreach collection="list" item="item" index="index" separator=",">
		(
				#{item.userId,jdbcType=INTEGER}, 
				#{item.roleId,jdbcType=INTEGER}
		)
		</foreach>
	</insert>
		  
	<delete id="deleteUserRRole" parameterType="map" >
		DELETE FROM PUB_USER_R_ROLE 
		<if test="condition.expressions != null ">
			<where>${condition.comboedExpressions}</where>
		</if>		
	</delete>
	
	<!-- 查询用户是否拥有指定操作权限 -->
	<select id="hasPermission" parameterType="map" resultType="string">
		SELECT P.OPERATION_NAME FROM PUB_USER U, PUB_USER_R_ROLE UR,PUB_ROLE R, PUB_ROLE_R_OPERATION RP, PUB_OPERATION P 
		WHERE R.ROLE_ID = RP.ROLE_ID 
		AND P.OPERATION_ID = RP.OPERATION_ID 
		AND U.USER_ID = UR.USER_ID 
		AND R.ROLE_ID = UR.ROLE_ID 
		<if test="userId != null">
			AND U.USER_ID = #{userId}
		</if>
		<if test="operationCode != null">
			AND P.OPERATION_CODE = #{operationCode}
		</if>
	</select>
</mapper>